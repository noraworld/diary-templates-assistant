name: Issue Changer

on:
  workflow_call:
    inputs:
      main_repo:
        required: true
        type: string
      template_repo:
        required: true
        type: string
      timezone:
        required: true
        type: string
    outputs:
      succeeded:
        value: ${{ jobs.build.outputs.succeeded }}
    secrets:
      token:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      succeeded: ${{ steps.change.outputs.succeeded }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Change issues
        id: change
        run: |
          if [ "$(gh issue list --repo "$TEMPLATE_REPO" | wc -l)" -ne 0 ]; then
            echo "Some of or all of the diary templates have not been closed yet." >&2
            echo "succeeded=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          ISSUE_TEMPLATE=$(gh api "/repos/$MAIN_REPO/contents/.github/ISSUE_TEMPLATE/general.md" \
                           --jq .content                                                         |
                           base64 --decode)
          ISSUE_TITLE_LIST=$(gh issue list --repo "$MAIN_REPO" --json title --jq .[].title)

          title=$(echo "$ISSUE_TEMPLATE"                                        |
                  grep "title: "                                                |
                  sed -e 's/^title: //g'                                        |
                  sed -e "s/[\"\']//g"                                          |
                  sed -e "s/\[{{DATE}}\]/$(date '+%Y-%m-%d' --date '0 day')/g")

          if [ "$(echo "$ISSUE_TITLE_LIST" | grep -c "$title")" -ne 0 ]; then
            echo "It will be skipped because \"$title\" already exists." >&2
            echo "succeeded=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          body=$(echo "$ISSUE_TEMPLATE" | sed -e '/^---$/,/^---$/d')
          processed_body="$body"

          if [ "$MAIN_REPO" = "noraworld/reserved-diary" ]; then
            TO_DO=$(gh issue list                                                                         \
                    --repo noraworld/to-do                                                                \
                    --search "label:today,tomorrow"                                                       \
                    --json title,url                                                                      \
                    --template '{{range.}}* [ ] [{{.title}}]({{.url}}){{"\r\n"}}{{end}}{{"\r\n"}}' | tac)

            if [ "$(echo "$TO_DO" | tr -d "\n" | tr -d "\r" | tr -d "\r\n")" != "" ]; then
              processed_body=$(echo "$processed_body" | sed -E 's/\* 特になし//g')
              processed_body="$processed_body$TO_DO"
            fi
          elif [ "$MAIN_REPO" = "noraworld/daily-report" ]; then
            TO_DO=$(gh issue list                                                                         \
                    --repo noraworld/work-scraps                                                          \
                    --search "label:today,tomorrow"                                                       \
                    --json title,url                                                                      \
                    --template '{{range.}}* [ ] [{{.title}}]({{.url}}){{"\r\n"}}{{end}}{{"\r\n"}}' | tac)

            if [ "$(echo "$TO_DO" | tr -d "\n" | tr -d "\r" | tr -d "\r\n")" != "" ]; then
              processed_body=$(echo "$processed_body" | sed -E 's/\* 特になし//g')
              processed_body="$processed_body$TO_DO"
            fi
          fi

          assignee=$(echo "$ISSUE_TEMPLATE"     |
                     grep "assignees: "         |
                     sed -e 's/^assignees: //g' |
                     sed -e "s/[\"\']//g")

          url=$(gh issue create            \
                  --repo "$MAIN_REPO"      \
                  --title "$title"         \
                  --body "$processed_body" \
                  --assignee "$assignee")

          if [ "$(gh issue list --repo "$MAIN_REPO" | wc -l)" -ne 2 ]; then
            echo "There are more than 2 issues, which means something is wrong." >&2
            echo "succeeded=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          gh issue list         \
            --repo "$MAIN_REPO" |
            awk '{ print $1 }'  |
            tail -n 1           |
            xargs -I {} gh issue close {} --repo "$MAIN_REPO"

          echo "succeeded=true" >> $GITHUB_OUTPUT
        shell: sh
        env:
          GH_TOKEN: ${{ secrets.token }}
          MAIN_REPO: ${{ inputs.main_repo }}
          TEMPLATE_REPO: ${{ inputs.template_repo }}
          TZ: ${{ inputs.timezone }}
