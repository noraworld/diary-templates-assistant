name: Pile

on:
  workflow_dispatch:
    inputs:
      target:
        required: true
        description: '対象'
        type: choice
        options:
          - ''
          - 'プライベート'
          - '仕事'
        default: ''
      arranged:
        required: false
        description: '現在の課題を整理したか'
        type: boolean
        default: true
      remarks:
        required: false
        description: '備考'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Comment a pile template
        run: |
          case "${{ github.event.inputs.target }}" in
            "プライベート")
              TEMPLATE_REPO="noraworld/diary-templates"
              TEMPLATE_FILE_REPO="noraworld/diary-templates-assistant"
              TEMPLATE_FILE_PATH=".github/ISSUE_TEMPLATE/11--pile.md"
              TASK_REPO="noraworld/to-do"
              SEARCH_QUERY="pile 翌日やること整理"
              ;;
            "仕事")
              TEMPLATE_REPO="noraworld/daily-report-templates"
              TEMPLATE_FILE_REPO="noraworld/daily-report-templates"
              TEMPLATE_FILE_PATH=".github/ISSUE_TEMPLATE/pile.md"
              TASK_REPO="noraworld/work-scraps"
              SEARCH_QUERY="翌営業日にやること整理"
              ;;
            *)
              echo "ERROR: invalid target" >&2
              exit 1
              ;;
          esac

          template=$(gh api "/repos/$TEMPLATE_FILE_REPO/contents/$TEMPLATE_FILE_PATH" --jq .content |
                       base64 --decode |
                       awk '/^```/{f++; next} f==1' |
                       while IFS= read -r line; do
                         if [ "$line" = "<ここにやることを挿入>" ]; then
                           gh issue list \
                             --repo $TASK_REPO \
                             --search "label:today,tomorrow" \
                             --json title,url \
                             --template '{{range.}}* [{{.title}}]({{.url}}){{"\r\n"}}{{end}}' |
                             tac
                         elif [ "$line" = "<ここに備考を挿入>" ]; then
                           echo "${{ github.event.inputs.remarks || '特になし。' }}"
                         elif [ "$line" = "* [ ] 現在の課題を整理" ] && [ "${{ github.event.inputs.arranged }}" = "true" ]; then
                           echo "* [x] 現在の課題を整理"
                         else
                           echo "$line"
                         fi
                       done)

            issue_number=$(gh issue list \
                             --repo $TEMPLATE_REPO \
                             --search "$SEARCH_QUERY" |
                             awk '{ print $1 }')

            gh issue comment "$issue_number" \
              --repo $TEMPLATE_REPO \
              --body "$template"
        shell: sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
