name: 'eδа: 🍀📆 翌日やること整理'

on:
  workflow_dispatch:
    inputs:
      target:
        required: true
        description: '対象リポジトリ'
        type: choice
        options:
          - ''
          - 'プライベート'
          - '仕事'
        default: ''
      work:
        required: true
        description: '明日は仕事する？'
        type: boolean
        default: true
      remarks:
        required: false
        description: '備考'
        type: string

jobs:
  pile:
    runs-on: ubuntu-latest
    outputs:
      template_repo: ${{ steps.set.outputs.template_repo }}
      search_query: ${{ steps.set.outputs.search_query }}
    steps:
      - name: Set
        id: set
        run: |
          case "${{ github.event.inputs.target }}" in
            "プライベート")
              echo "TEMPLATE_REPO=noraworld/diary-templates" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_REPO=noraworld/diary-templates-assistant" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_PATH=.github/ISSUE_TEMPLATE/pile.md" >> $GITHUB_ENV
              echo "TASK_REPO=noraworld/to-do" >> $GITHUB_ENV
              echo "SEARCH_QUERY=pile 翌日やること整理" >> $GITHUB_ENV

              echo "template_repo=noraworld/diary-templates" >> $GITHUB_OUTPUT
              echo "search_query=pile 翌日やること整理" >> $GITHUB_OUTPUT
              ;;
            "仕事")
              echo "TEMPLATE_REPO=noraworld/daily-report-templates" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_REPO=noraworld/daily-report-templates" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_PATH=.github/ISSUE_TEMPLATE/pile.md" >> $GITHUB_ENV
              echo "TASK_REPO=noraworld/work-scraps" >> $GITHUB_ENV
              echo "SEARCH_QUERY=翌営業日にやること整理" >> $GITHUB_ENV

              echo "template_repo=noraworld/daily-report-templates" >> $GITHUB_OUTPUT
              echo "search_query=翌営業日にやること整理" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "ERROR: invalid target" >&2
              exit 1
              ;;
          esac

      - name: Pile
        run: |
          template=$(gh api "/repos/${{ env.TEMPLATE_FILE_REPO }}/contents/${{ env.TEMPLATE_FILE_PATH }}" --jq .content |
                       base64 --decode |
                       awk '/^```/{f++; next} f==1' |
                       while IFS= read -r line; do
                         if [ "$line" = "<ここにやることを挿入>" ]; then
                           gh issue list \
                             --repo ${{ env.TASK_REPO }} \
                             --search "label:today,tomorrow" \
                             --json title,url \
                             --template '{{range.}}* [{{.title}}]({{.url}}){{"\r\n"}}{{end}}' |
                             tac
                         elif [ "$line" = "<ここに備考を挿入>" ]; then
                           echo "${{ github.event.inputs.remarks || '特になし。' }}"
                         else
                           echo "$line"
                         fi
                       done)

            issue_number=$(gh issue list \
                             --repo ${{ env.TEMPLATE_REPO }} \
                             --search "${{ env.SEARCH_QUERY }}" |
                             awk '{ print $1 }')

            gh issue comment "$issue_number" \
              --repo ${{ env.TEMPLATE_REPO }} \
              --body "$template"
        shell: sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  get-tomorrow:
    needs: pile
    if: github.event.inputs.work == 'false'
    runs-on: ubuntu-latest
    outputs:
      tomorrow: ${{ steps.tomorrow.outputs.tomorrow }}
    steps:
      - name: Get tomorrow
        id: tomorrow
        run: |
          today=$(gh issue list \
            --repo ${{ needs.pile.outputs.template_repo }} \
            --search "${{ needs.pile.outputs.search_query }}" \
            --limit 1 \
            --json title \
            --jq '.[].title' |
            cut -d '_' -f2)
          tomorrow=$(date -d "$today +1 day" +%F)

          echo "tomorrow=$tomorrow" >> $GITHUB_OUTPUT
        shell: sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  day-off-update:
    needs: get-tomorrow
    if: github.event.inputs.work == 'false'
    uses: noraworld/diary-templates-assistant/.github/workflows/update-day-off.yml@main
    with:
      date: ${{ needs.get-tomorrow.outputs.tomorrow }}
      fail_if_day_off: false
      gh_output_format: true
      timezone: Asia/Tokyo
