name: 'eδа: 🍀📆 翌日やること整理'

on:
  workflow_dispatch:
    inputs:
      target:
        required: true
        description: '対象リポジトリ'
        type: choice
        options:
          - ''
          - 'プライベート'
          - '仕事'
        default: ''
      work:
        required: true
        description: '明日は仕事する？'
        type: boolean
        default: true
      remarks:
        required: false
        description: '備考'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set
        run: |
          case "${{ github.event.inputs.target }}" in
            "プライベート")
              echo "TEMPLATE_REPO=noraworld/diary-templates" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_REPO=noraworld/diary-templates-assistant" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_PATH=.github/ISSUE_TEMPLATE/pile.md" >> $GITHUB_ENV
              echo "TASK_REPO=noraworld/to-do" >> $GITHUB_ENV
              echo "SEARCH_QUERY=pile 翌日やること整理" >> $GITHUB_ENV
              ;;
            "仕事")
              echo "TEMPLATE_REPO=noraworld/daily-report-templates" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_REPO=noraworld/daily-report-templates" >> $GITHUB_ENV
              echo "TEMPLATE_FILE_PATH=.github/ISSUE_TEMPLATE/pile.md" >> $GITHUB_ENV
              echo "TASK_REPO=noraworld/work-scraps" >> $GITHUB_ENV
              echo "SEARCH_QUERY=翌営業日にやること整理" >> $GITHUB_ENV
              ;;
            *)
              echo "ERROR: invalid target" >&2
              exit 1
              ;;
          esac

      - name: Pile
        run: |
          template=$(gh api "/repos/${{ env.TEMPLATE_FILE_REPO }}/contents/${{ env.TEMPLATE_FILE_PATH }}" --jq .content |
                       base64 --decode |
                       awk '/^```/{f++; next} f==1' |
                       while IFS= read -r line; do
                         if [ "$line" = "<ここにやることを挿入>" ]; then
                           gh issue list \
                             --repo ${{ env.TASK_REPO }} \
                             --search "label:today,tomorrow" \
                             --json title,url \
                             --template '{{range.}}* [{{.title}}]({{.url}}){{"\r\n"}}{{end}}' |
                             tac
                         elif [ "$line" = "<ここに備考を挿入>" ]; then
                           echo "${{ github.event.inputs.remarks || '特になし。' }}"
                         else
                           echo "$line"
                         fi
                       done)

            issue_number=$(gh issue list \
                             --repo ${{ env.TEMPLATE_REPO }} \
                             --search "${{ env.SEARCH_QUERY }}" |
                             awk '{ print $1 }')

            gh issue comment "$issue_number" \
              --repo ${{ env.TEMPLATE_REPO }} \
              --body "$template"
        shell: sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Check out repository
        if: github.event.inputs.work == 'false'
        uses: actions/checkout@v4

      - name: Get tomorrow
        if: github.event.inputs.work == 'false'
        run: |
          today=$(gh issue list \
            --repo ${{ env.TEMPLATE_REPO }} \
            --search "${{ env.SEARCH_QUERY }}" \
            --limit 1 \
            --json title \
            --jq '.[].title' |
            cut -d '_' -f2)
          tomorrow=$(date -d "$today +1 day" +%F)

          echo "TOMORROW=$tomorrow" >> $GITHUB_ENV
        shell: sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Update day-off list
        if: github.event.inputs.work == 'false'
        run: |
          pipenv run python app/day-off.py append ${{ env.TOMORROW }}

          if [ "$(git status --porcelain)" != "" ]; then
            git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
            git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
            git add data/day-off.json
            git commit -m "Make ${{ env.TOMORROW }} day off"
            git push -u origin main
          fi
        shell: sh
        env:
          FAIL_IF_DAY_OFF: false
          GH_OUTPUT_FORMAT: true
          PYTHONPATH: .
          TZ: Asia/Tokyo
